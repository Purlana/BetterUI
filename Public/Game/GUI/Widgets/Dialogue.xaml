<ls:UIWidget
  x:Name="Dialogue"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
  xmlns:ls="clr-namespace:ls"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
  xmlns:System="clr-namespace:System;assembly=mscorlib"
  mc:Ignorable="d"
  ls:UIWidget.ContextName="Dialogue"
  d:DataContext="{d:DesignInstance {x:Type ls:Dialogue}, IsDesignTimeCreatable=True}"
  d:DesignHeight="2160"
  d:DesignWidth="3840">

  <ls:UIWidget.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Library/DialogueTemplates.xaml"/>
      </ResourceDictionary.MergedDictionaries>

      <ls:LSMessageBoxData
        x:Key="OnAttackMessageBox"
        Text="{Binding Source='h3de62469gbf26g4390ga9a5g530b768217fe', Converter={StaticResource TranslatedStringConverter}}"
        Title="{Binding Source='h4ce24528g0b74g4dc1g8ba6g80071f09ac12', Converter={StaticResource TranslatedStringConverter}}"
        UUID="UUID">
        <ls:LSMessageBoxData.Actions>
          <ls:LSGameCommandData
            ActionName="{Binding Source='hf52bf842g05beg48dega717gca15b3678e0e', Converter={StaticResource TranslatedStringConverter}}"
            Command="{Binding DataContext.AttackCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            ControlTemplate="{StaticResource BlueButton}"
            BoundEvent="UIAccept"/>
          <ls:LSGameCommandData
            ActionName="{Binding Source='heded8384gb4f5g439dg9883g5cf950b2bbfc', Converter={StaticResource TranslatedStringConverter}}"
            Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            CommandParameter="CloseMessageBox"
            ControlTemplate="{StaticResource RedButton}"
            BoundEvent="UICancel"/>
        </ls:LSMessageBoxData.Actions>
      </ls:LSMessageBoxData>

      <System:Int16 x:Key="ShowCharacterSelectionCount">1</System:Int16>

      <Style x:Key="Dialogue.ContinueBinding" TargetType="ls:LSInputBinding">
        <Setter Property="PlayerID" Value="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="Command" Value="{Binding SelectorEnterCommand.ActionCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="SoundID" Value="UI_Input_Dialogue_Continue"/>
      </Style>

      <Storyboard x:Key="Dialogue.Anim">
        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1" BeginTime="0:0:1" Duration="0:0:0.4">
          <DoubleAnimation.EasingFunction>
            <CubicEase EasingMode="EaseOut"/>
          </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0.4">
          <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0"/>
        </BooleanAnimationUsingKeyFrames>
      </Storyboard>
    </ResourceDictionary>
  </ls:UIWidget.Resources>

  <ContentControl DataContext="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue}" d:DataContext="{d:DesignInstance {x:Type ls:Dialogue}, IsDesignTimeCreatable=False}">
    <Grid>
      <ContentControl Template="{DynamicResource PollNotification}" VerticalAlignment="Top" HorizontalAlignment="Center">
        <ContentControl.Style>
          <Style TargetType="ContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding DataContext.Data.IsCommunityPollEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding PollNotification}" Value="">
                <Setter Property="Visibility" Value="Collapsed"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
        <TextBlock Text="{Binding PollNotification}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource LS_PrimaryColor}"/>
      </ContentControl>

      <ls:LSInputBinding PlayerID="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="UIUp" Command="{Binding SelectorUpCommand.ActionCommand}"/>
      <ls:LSInputBinding PlayerID="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="UIDown" Command="{Binding SelectorDownCommand.ActionCommand}"/>
      <ls:LSInputBinding BoundEvent="UIEndTurn" Style="{StaticResource Dialogue.ContinueBinding}"/>

      <!-- this is an alternative to allow pressing "1" to on continue nodes -->
      <ls:LSInputBinding BoundEvent="UISelectSlot1" Style="{StaticResource Dialogue.ContinueBinding}" IsEnabled="{Binding ShowAnswers, Converter={StaticResource InvertBoolConverter}, Mode=OneWay}"/>

      <ContentControl Template="{StaticResource Dialogue.DialogueNotification}"/>
      <!-- dialogue text and answers -->
      <ContentControl Template="{StaticResource Dialogue.BodyAndAnswersContainer}"/>

      <!-- debug view of important internals -->
      <!-- <StackPanel Margin="400,300,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"> <TextBlock FontSize="50" Foreground="White"> <Run Text="ShowSubtitle: " /> <Run Text="{Binding ShowSubtitle, Mode=OneWay}" /> </TextBlock> <TextBlock
      FontSize="50" Foreground="White"> <Run Text="ShowAnswers: " /> <Run Text="{Binding ShowAnswers, Mode=OneWay}" /> </TextBlock> <TextBlock FontSize="50" Foreground="White"> <Run Text="ShowAnswersAllowed: " /> <Run Text="{Binding ShowAnswersAllowed,
      Mode=OneWay}" /> </TextBlock> <TextBlock FontSize="50" Foreground="White"> <Run Text="WaitingForInput: " /> <Run Text="{Binding WaitingForInput, Mode=OneWay}" /> </TextBlock> <TextBlock FontSize="50" Foreground="White"> <Run Text="Num Answers: " />
      <Run Text="{Binding Answers.Count, Mode=OneWay}" /> </TextBlock> </StackPanel> -->

      <!-- tabs -->
      <Grid x:Name="Tabs" Margin="36,0,36,35" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
        <Grid.Style>
          <Style TargetType="Grid">
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Opacity" Value="0"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ShowAnswers, Mode=OneWay}" Value="True">
                <DataTrigger.EnterActions>
                  <BeginStoryboard x:Name="Anim" Storyboard="{StaticResource Dialogue.Anim}"/>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                  <StopStoryboard BeginStoryboardName="Anim"/>
                </DataTrigger.ExitActions>
              </DataTrigger>
              <DataTrigger Binding="{Binding DataContext.SelectedCharacterCanChangeActiveDialogueSpeaker, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <DataTrigger.EnterActions>
                  <BeginStoryboard x:Name="SelectorAnim" Storyboard="{StaticResource Dialogue.Anim}"/>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                  <StopStoryboard BeginStoryboardName="SelectorAnim"/>
                </DataTrigger.ExitActions>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>
      </Grid>

      <Rectangle x:Name="TooltipHolder" VerticalAlignment="Bottom" Margin="40 0 0 180"/>

      <!-- Buttons -->
      <ls:LSButton
        x:Name="btnStopListening"
        Style="{DynamicResource CloseButton}"
        SoundID="UI_HUD_Dialogue_StopListening"
        Command="{Binding DataContext.StopListeningCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
        VerticalAlignment="Top"
        HorizontalAlignment="Right"
        Margin="30"
        Visibility="{Binding DataContext.ActiveDialogueIsListening, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource BoolToVisibleConverter}}"/>

      <StackPanel Name="ButtonsContainer" Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="40 0 0 20">
        <!--#region Character selection-->
        <ContentControl IsHitTestVisible="{Binding Path=IsChecked, ElementName=btnToggleCharacters}" Opacity="0" Visibility="Collapsed" DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">
          <ListBox
            x:Name="PortraitHolder"
            ItemsSource="{Binding CurrentPlayer.AssignedCharacters}"
            ItemContainerStyle="{StaticResource Dialogue.PlayerPortraits}"
            SelectedItem="{Binding CurrentPlayer.SelectedCharacter, Mode=OneWay}"
            Background="Transparent"
            ScrollViewer.HorizontalScrollBarVisibility="Disabled"
            ScrollViewer.VerticalScrollBarVisibility="Disabled"
            BorderBrush="Transparent">
            <ListBox.ItemsPanel>
              <ItemsPanelTemplate>
                <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
              </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
          </ListBox>

          <ContentControl.Style>
            <Style TargetType="ContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=btnToggleCharacters}" Value="True">
                  <DataTrigger.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.2">
                          <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                          </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                          <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </BeginStoryboard>
                  </DataTrigger.EnterActions>
                  <DataTrigger.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2">
                          <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                          </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                          <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}"/>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </BeginStoryboard>
                  </DataTrigger.ExitActions>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </ContentControl.Style>
        </ContentControl>
        <!--#endregion-->
        <StackPanel Orientation="Horizontal">
          <ls:LSButton
            x:Name="btnMenu"
            Style="{StaticResource GameMenuButtonStyle}"
            Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            CommandParameter="ToggleGameMenu"
            Content="{Binding ShortShortcut}"
            SoundID="UI_HUD_EscapeMenu_Open"
            DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='Menu', RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            ToolTipService.Placement="Top">
            <ls:LSButton.ToolTip>
              <ls:LSTooltip Content="{Binding Source='hb9a8dd57g134fg425fg9da0g1dc579af0c60',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='Loca'}"/>
            </ls:LSButton.ToolTip>
          </ls:LSButton>

          <ls:LSToggleButton
            x:Name="btnToggleCharacters"
            ToolTipService.Placement="Top"
            HorizontalAlignment="Left"
            Style="{StaticResource Dialogue.ExpandCharactersButtonStyle}"
            Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibleConverter}, ConverterParameter={StaticResource ShowCharacterSelectionCount}}"
            SoundID="UI_HUD_Dialogue_ExpandCharacters">
            <ls:LSToggleButton.ToolTip>
              <ls:LSTooltip Content="{Binding Source='h455c1b64g1c6dg4ac4ga9aegb3f0d761858a',Converter={StaticResource TranslatedStringConverter}}"/>
            </ls:LSToggleButton.ToolTip>
          </ls:LSToggleButton>
          <ls:LSButton
            x:Name="btnTrade"
            ToolTipService.Placement="Top"
            IsEnabled="{Binding DataContext.ActiveDialogueIsListening, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource InvertBoolConverter}}"
            Style="{StaticResource TradeButtonStyle}"
            Visibility="{Binding CanTrade, Converter={StaticResource BoolToVisibleConverter}}"
            SoundID="UI_HUD_Dialogue_Trade"
            Command="{Binding DataContext.StartTrade, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            CommandParameter="{Binding DialogueCharacter}">
            <ls:LSButton.ToolTip>
              <ls:LSTooltip Content="{Binding Source='he4fdff4dga552g4023gb49bg333f39b77015',Converter={StaticResource TranslatedStringConverter}}"/>
            </ls:LSButton.ToolTip>
          </ls:LSButton>
          <ls:LSButton
            x:Name="btnAttack"
            ToolTipService.Placement="Top"
            IsEnabled="{Binding DataContext.ActiveDialogueIsListening, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource InvertBoolConverter}}"
            Style="{StaticResource AttackButtonStyle}"
            Visibility="{Binding AllowAttack, Converter={StaticResource BoolToVisibleConverter}}"
            Command="{Binding DataContext.OpenMessageBox, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
            CommandParameter="{DynamicResource OnAttackMessageBox}">
            <ls:LSButton.ToolTip>
              <ls:LSTooltip Content="{Binding Source='hc2b3a4e3ge669g4919ga291ged7ebad9c1b1',Converter={StaticResource TranslatedStringConverter}}"/>
            </ls:LSButton.ToolTip>
          </ls:LSButton>
          <ls:LSButton x:Name="btnHistory" Style="{StaticResource HistoryButtonStyle}" Command="{Binding DataContext.CustomEvent, ElementName=Dialogue}" CommandParameter="OpenDialogueHistory" SoundID="UI_HUD_Dialogue_History" ToolTipService.Placement="Top">
            <ls:LSButton.ToolTip>
              <ls:LSTooltip Content="{Binding Source='he9e4a39fg8a5dg4ac5gacffgaea214260c69',Converter={StaticResource TranslatedStringConverter}}"/>
            </ls:LSButton.ToolTip>
          </ls:LSButton>

        </StackPanel>
      </StackPanel>

      <!--<TextBlock VerticalAlignment="Top" HorizontalAlignment="Right" FontSize="{StaticResource GiganticFontSize}" Opacity="0.7"> <Run Text="{Binding Source='h8be1f0ddgdfa7g4812ga2b5g04854b2a1a65', Converter={StaticResource TranslatedStringConverter},
      ConverterParameter='ToUpper'}"/> <Run Text=" - "/> <Run Text="{Binding DataContext.Data.VersionString, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/> </TextBlock>-->
      <!--LARIAN I KNOW ITS EARLY ACCESS I DONT NEED TO SEE THE MESSAGE-->

    </Grid>
  </ContentControl>
</ls:UIWidget>