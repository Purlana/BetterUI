<StateMachine
  x:Key="stateMachine"
  RootState="Root"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:ls"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d">

  <StateMachine.States>

    <!--STATE: Root-->

    <State Name="Root" Layout="Common" Owner="All">
      <State.InitialSubstates>
        <InitialSubstate Name="SystemRoot"/>
        <InitialSubstate Name="GameRoot"/>
      </State.InitialSubstates>
    </State>

    <State Name="SystemRoot" Layout="Common" Owner="All">
      <State.Events>
        <!--<Event Name = "OpenSystemMessageBox"> <Event.Actions> <AddSubstate Name="SystemMessageBox"/> </Event.Actions> </Event>-->
        <Event Name="GE.EditorMode">
          <Event.Actions>
            <RemoveAllSubstates/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="GameRoot" Layout="Common" Owner="All">
      <State.Events>
        <Event Name="GE.OnStateMainMenu">
          <Event.Actions>
            <SetSubstate Name="SplashScreen"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnStateLoadingStart">
          <Event.Actions>
            <SetSubstate Name="Loading"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnStateRunning">
          <Event.Actions>
            <SetSubstate Name="Running"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnStateLobby">
          <Event.Actions>
            <SetSubstate Name="Lobby"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnBusyShow">
          <Event.Actions>
            <PushState Name="Busy"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnSaveShow">
          <Event.Actions>
            <PushState Name="Saving"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.EditorMode">
          <Event.Actions>
            <RemoveAllSubstates/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: SplashScreen-->
    <State Name="SplashScreen" DisableStatesBelow="True" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="SplashScreen.xaml"/>
      </State.Widgets>
      <State.Events>
        <Event Name="OpenEula">
          <Event.Actions>
            <PushState Name="Eula"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMainMenu">
          <Event.Actions>
            <PushState Name="MainMenu"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Eula-->
    <State Name="Eula" DisableStatesBelow="True" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="Eula.xaml"/>
      </State.Widgets>
      <State.Events>
        <Event Name="OpenMainMenu">
          <Event.Actions>
            <PushState Name="MainMenu"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: MainMenu-->
    <State Name="MainMenu" DisableStatesBelow="True" HideStatesBelow="True" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="MainMenu.xaml"/>
      </State.Widgets>
      <State.Events>
        <Event Name="OpenCredits">
          <Event.Actions>
            <PushState Name="Credits"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenOptions">
          <Event.Actions>
            <AddSubstate Name="Options"/>
          </Event.Actions>
        </Event>
        <Event Name="ProfileSelectOpen">
          <Event.Actions>
            <AddSubstate Name="ProfileSelect"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenLobbyBrowser">
          <Event.Actions>
            <AddSubstate Name="LobbyBrowser"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenLobby">
          <Event.Actions>
            <AddSubstate Name="Lobby"/>
          </Event.Actions>
        </Event>
        <Event Name="LoadGameOpen">
          <Event.Actions>
            <AddSubstate Name="MainMenu.LoadGame"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenHDR">
          <Event.Actions>
            <AddSubstate Name="HDRCalibration"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="HDRCalibration" HideStatesBelow="True" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="HDRCalibration.xaml" Layer="MessageBox"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: CharacterCreation -->
    <State Name="CharacterCreation" HideStatesBelow="True" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Notification.xaml" Layer="Notifications"/>
        <StateWidget Filename="CharacterCreation.xaml" Layer="Pause"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenSpellSelecting">
          <Event.Actions>
            <AddSubstate Name="SpellSelecting"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: CharacterLevelUp -->
    <State Name="CharacterLevelUp" HideStatesBelow="True" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Notification.xaml" Layer="Notifications"/>
        <StateWidget Filename="CharacterLevelUp.xaml" Layer="Pause"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.UICancel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenSpellSelecting">
          <Event.Actions>
            <AddSubstate Name="SpellSelecting"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenFeatSelecting">
          <Event.Actions>
            <AddSubstate Name="FeatSelecting"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: SpellSelecting-->
    <State Name="SpellSelecting" DisableStatesBelow="True" Layout="Common" Owner="Player" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="SpellSelecting.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: FeatSelecting-->
    <State Name="FeatSelecting" DisableStatesBelow="True" Layout="Common" Owner="Player" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="FeatSelecting.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="OpenSpellSelecting">
          <Event.Actions>
            <AddSubstate Name="SpellSelecting"/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Loading-->
    <State Name="Loading" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="LoadingScreen.xaml"/>
      </State.Widgets>
    </State>

    <!--STATE: Credits -->
    <State Name="Credits" HideStatesBelow="True" DisableStatesBelow="True" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="Credits.xaml"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <!-- ESC button -->
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Paused-->
    <State Name="Paused" DisableStatesBelow="True" Layout="Player" Owner="Player" HideStatesBelow="True" IsModal="True" ForceSplitscreen="True">
      <State.Widgets>
        <StateWidget Filename="GameMenu.xaml" Layer="Pause"/>
      </State.Widgets>

      <State.Events>
        <Event Name="ToggleGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.UICancel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenGameOverMessageBox">
          <Event.Actions>
            <PushState Name="GameOverMessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenOptions">
          <Event.Actions>
            <PushState Name="Options"/>
          </Event.Actions>
        </Event>
        <Event Name="LoadGameOpen">
          <Event.Actions>
            <AddSubstate Name="Paused.LoadGame"/>
          </Event.Actions>
        </Event>
        <Event Name="SaveGameOpen">
          <Event.Actions>
            <AddSubstate Name="Paused.SaveGame"/>
          </Event.Actions>
        </Event>
        <Event Name="CharacterAssignOpen">
          <Event.Actions>
            <PushState Name="CharacterAssign"/>
          </Event.Actions>
        </Event>
        <Event Name="ConnectivityMenuOpen">
          <Event.Actions>
            <PushState Name="ConnectivityMenu"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Running-->
    <State Name="Running" Layout="Common" Owner="All">
      <State.InitialSubstates>
        <InitialSubstate Name="PlayerUIs"/>
      </State.InitialSubstates>
      <State.Events>
        <!-- eat GE.OnStateRunning to avoid restarting the Running state (for example, when autosaving ends) -->
        <Event Name="GE.OnStateRunning"/>
        <Event Name="ProfileSelectOpen">
          <Event.Actions>
            <AddSubstate Name="ProfileSelect"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenGameOverMessageBox">
          <Event.Actions>
            <PushState Name="GameOverMessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="LoadGameOpen">
          <Event.Actions>
            <PushState Name="Paused.LoadGame"/>
          </Event.Actions>
        </Event>
        <Event Name="ShowBook">
          <Event.Actions>
            <PushState Name="Book"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenCharacterCreation">
          <Event.Actions>
            <PushState Name="CharacterCreation"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenCharacterLevelUp">
          <Event.Actions>
            <PushState Name="CharacterLevelUp"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenTutorial">
          <Event.Actions>
            <AddSubstate Name="Tutorial"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenActOver">
          <Event.Actions>
            <PushState Name="ActOver"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PlayerUIsHolder-->
    <State Name="PlayerUIsHolder" Layout="Player" Owner="Player">
      <State.InitialSubstates>
        <InitialSubstate Name="PlayerHUD"/>
        <InitialSubstate Name="PlayerPanelsHolder"/>
      </State.InitialSubstates>

      <State.Events>
        <Event Name="ToggleGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnDialogueShow">
          <Event.Actions>
            <PushState Name="Dialogue"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenContainerInventory">
          <Event.Actions>
            <AddSubstate Name="ContainerInventory"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenCombine">
          <Event.Actions>
            <PushState Name="Combine"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenPickpocket">
          <Event.Actions>
            <AddSubstate Name="Pickpocket"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenExamine">
          <Event.Actions>
            <PushState Name="Examine"/>
          </Event.Actions>
        </Event>
        <Event Name="ActiveRollOpen">
          <Event.Actions>
            <PushState Name="ActiveRoll"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenRewardPanel">
          <Event.Actions>
            <PushState Name="RewardPanel"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PlayerUIs-->
    <State Name="PlayerUIs" Layout="Player" Owner="Player">
      <State.InitialSubstates>
        <InitialSubstate Name="PlayerNotifications"/>
        <InitialSubstate Name="PlayerUIsHolder"/>
      </State.InitialSubstates>
    </State>

    <!--STATE: PlayerHUD-->
    <State Name="PlayerHUD" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Overlay.xaml" Layer="Notifications"/>
        <StateWidget Filename="OverheadInfo.xaml" Layer="HUD" IgnoreHitTest="True"/>
        <StateWidget Filename="WorldTooltips.xaml" Layer="HUD"/>
        <StateWidget Filename="HotBar.xaml" Layer="HUDTop"/>
        <StateWidget Filename="CharacterResources.xaml" Layer="HUDTop"/>
        <StateWidget Filename="Minimap.xaml" Layer="HUD"/>
        <StateWidget Filename="TargetInfo.xaml" Layer="HUD" IgnoreHitTest="True"/>
        <StateWidget Filename="PlayerPortraits.xaml" Layer="HUDTop"/>
        <StateWidget Filename="HUDInfo.xaml" Layer="HUD" IgnoreHitTest="True"/>
        <StateWidget Filename="CombatLog.xaml" Layer="HUD"/>
        <StateWidget Filename="CombatantsOverlay.xaml" Layer="HUD"/>
        <StateWidget Filename="CursorText.xaml" Layer="HUDTop"/>
        <StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
        <StateWidget Filename="PassiveRoll.xaml" Layer="HUDTop"/>
        <StateWidget Filename="VoiceChat.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="OpenSelectionFlyOut">
          <Event.Actions>
            <AddSubstate Name="SelectionFlyOut"/>
          </Event.Actions>
        </Event>
      </State.Events>

    </State>

    <!--STATE: SelectionFlyOut-->
    <State Name="SelectionFlyOut" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="SelectionFlyOut.xaml" Layer="DragAndDrop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="SelectionFlyOut">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PlayerNotifications-->
    <State Name="PlayerNotifications" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Notification.xaml" Layer="Notifications"/>
      </State.Widgets>
    </State>

    <!-- STATE: PlayerPanelsHandle -->
    <State Name="PlayerPanelsHolder" Layout="Player" Owner="Player">
      <State.InitialSubstates>
        <InitialSubstate Name="PlayerPanels"/>
        <InitialSubstate Name="ExtractedPanels"/>
        <InitialSubstate Name="PlayerRadials"/>
      </State.InitialSubstates>
    </State>

    <State Name="PlayerRadials" Layout="Player" Owner="Player"></State>

    <!-- STATE: ExtractedPanels -->
    <State Name="ExtractedPanels" Layout="Player" Owner="Player">
      <State.Events>
        <Event Name="ExtractEquipment">
          <Event.Actions>
            <AddSubstate Name="ExtractedEquipment"/>
          </Event.Actions>
        </Event>
        <Event Name="ExtractInventory">
          <Event.Actions>
            <AddSubstate Name="ExtractedInventory"/>
          </Event.Actions>
        </Event>
        <Event Name="ExtractCharacterSheet">
          <Event.Actions>
            <AddSubstate Name="ExtractedCharacterSheet"/>
          </Event.Actions>
        </Event>
        <Event Name="ExtractSpellBook">
          <Event.Actions>
            <AddSubstate Name="ExtractedSpellBook"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Extracted Equipment -->
    <State Name="ExtractedEquipment" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ExtractedPanel.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseEquipmentPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Extracted Inventory -->
    <State Name="ExtractedInventory" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ExtractedPanel.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseInventoryPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Extracted Character Sheet -->
    <State Name="ExtractedCharacterSheet" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ExtractedPanel.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseCharSheetPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Extracted Spell Book -->
    <State Name="ExtractedSpellBook" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ExtractedPanel.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseSpellBookPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PlayerPanels-->
    <State Name="PlayerPanels" Layout="Player" Owner="Player">
      <State.Events>
        <Event Name="CloseAll">
          <Event.Actions>
            <RemoveAllSubstates/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleInventory">
          <Event.Actions>
            <SetSubstate Name="Inventory"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleJournal">
          <Event.Actions>
            <SetSubstate Name="JournalQuests"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalQuests">
          <Event.Actions>
            <SetSubstate Name="JournalQuests"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalMap">
          <Event.Actions>
            <SetSubstate Name="JournalMap"/>
          </Event.Actions>
        </Event>
        <Event Name="ShowJournalMap">
          <Event.Actions>
            <SetSubstate Name="JournalMap"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalDialogues">
          <Event.Actions>
            <SetSubstate Name="JournalDialogues"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalInfo">
          <Event.Actions>
            <SetSubstate Name="JournalInfo"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalTutorial">
          <Event.Actions>
            <SetSubstate Name="JournalTutorial"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenTutorialPopup">
          <Event.Actions>
            <SetSubstate Name="TutorialPopup"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleInventory">
          <Event.Actions>
            <SetSubstate Name="PartyInventory"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleEquipment">
          <Event.Actions>
            <SetSubstate Name="PartyEquipment"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleCharacterPane">
          <Event.Actions>
            <SetSubstate Name="PartyCharacterSheet"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleCharacterOverview">
          <Event.Actions>
            <SetSubstate Name="CharacterOverview"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleSpells">
          <Event.Actions>
            <SetSubstate Name="SpellBook"/>
          </Event.Actions>
        </Event>
        <Event Name="SplitItemToggle">
          <Event.Actions>
            <PushState Name="SplitItem"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.SplitItemToggle">
          <Event.Actions>
            <PushState Name="SplitItem"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleConditionsPanel">
          <Event.Actions>
            <PushState Name="ConditionsPanel"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PartyEquipment-->
    <State Name="PartyEquipment" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="PartyEquipment.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleEquipment">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleEquipment">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: PartyCharacterSheet-->
    <State Name="PartyCharacterSheet" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="PartyCharacterSheet.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleCharacterPane">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleCharacterPane">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: CharacterOverview-->
    <State Name="CharacterOverview" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="CharacterOverview.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleCharacterOverview">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Inventory-->
    <State Name="PartyInventory" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="PartyInventory.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInventory">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleInventory">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenSortInventory">
          <Event.Actions>
            <SetSubstate Name="SortInventory"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="SortInventory" Layout="Player" Owner="Player" DisableStatesBelow="True">
      <State.Widgets>
        <StateWidget Filename="SortInventory.xaml" Layer="MessageBox"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>

        <Event Name="IE.UICancel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: JournalQuests-->
    <State Name="JournalQuests" Layout="Player" Owner="Player" HideStatesBelow="True">
      <State.Widgets>
        <StateWidget Filename="JournalQuests.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleJournal">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalQuests">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: JournalMap-->
    <State Name="JournalMap" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="JournalMap.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleJournalMap">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleMap">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>

      </State.Events>
    </State>

    <!--STATE: JournalDialogues-->
    <State Name="JournalDialogues" Layout="Player" Owner="Player" HideStatesBelow="True">
      <State.Widgets>
        <StateWidget Filename="JournalDialogues.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: JournalInfo -->
    <State Name="JournalInfo" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="JournalInfo.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: JournalTutorial -->
    <State Name="JournalTutorial" Layout="Player" Owner="Player" HideStatesBelow="True">
      <State.Widgets>
        <StateWidget Filename="JournalTutorials.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: TutorialPopup -->
    <State Name="TutorialPopup" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="TutorialPopup.xaml" Layer="HUDTop"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Trade-->
    <State Name="Trade" HideStatesBelow="True" DisableStatesBelow="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Trade.xaml" Layer="Panels"/>
        <StateWidget Filename="PlayerPortraits.xaml" Layer="HUDTop"/>
        <StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
      </State.Widgets>

      <State.Events>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="SplitItemToggle">
          <Event.Actions>
            <PushState Name="SplitItem"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenExamine">
          <Event.Actions>
            <PushState Name="Examine"/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAll">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: SpellBook-->
    <State Name="SpellBook" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="SpellBook.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleSpells">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleSpells">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: ProfileSelect-->
    <State Name="ProfileSelect" DisableStatesBelow="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ProfileSelect.xaml" Layer="Notifications"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Messagebox-->
    <State Name="MessageBox" DisableStatesBelow="True" IsModal="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="MessageBox.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="TestAction">
          <Event.Actions>
            <PushState Name="Paused"/>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseMessageBox">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="LoadGameOpen">
          <Event.Actions>
            <PushState Name="Paused.LoadGame"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenHDR">
          <Event.Actions>
            <AddSubstate Name="HDRCalibration"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: GameOverMessagebox-->
    <State Name="GameOverMessageBox" DisableStatesBelow="True" IsModal="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="MessageBox.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseMessageBox">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="LoadGameOpen">
          <Event.Actions>
            <PushState Name="Paused.LoadGame"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Picture in picture panel -->
    <State Name="PiPPanel" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="PiPPanel.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="ClosePiPPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Messagebox-->
    <State Name="SystemMessageBox" DisableStatesBelow="True" IsModal="True" Layout="Common" Owner="DefaultPlayer">
      <State.Widgets>
        <StateWidget Filename="MessageBox.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseMessageBox">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Book -->
    <State Name="Book" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Book.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAllFullscreen">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Dialogue-->
    <State Name="Dialogue" DisableStatesBelow="True" HideStatesBelow="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Dialogue.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="GE.OnDialogueShow"/>
        <Event Name="OpenTrade">
          <Event.Actions>
            <PushState Name="Trade"/>
          </Event.Actions>
        </Event>
        <Event Name="GE.OnDialogueHide">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenDialogueHistory">
          <Event.Actions>
            <PushState Name="DialogueHistory"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.OpenDialogueHistory">
          <Event.Actions>
            <PushState Name="DialogueHistory"/>
          </Event.Actions>
        </Event>
        <Event Name="ActiveRollOpen">
          <Event.Actions>
            <PushState Name="ActiveRoll"/>
          </Event.Actions>
        </Event>
        <Event Name="ToggleGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <PushState Name="Paused"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenTutorial">
          <Event.Actions>
            <AddSubstate Name="Tutorial"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenGameOverMessageBox">
          <Event.Actions>
            <PushState Name="GameOverMessageBox"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!-- STATE: DialogueHistory -->
    <State Name="DialogueHistory" DisableStatesBelow="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="DialogueHistory.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseDialogueHistory">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.CloseDialogueHistory">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: SplitItem-->
    <State Name="SplitItem" IsModal="True" DisableStatesBelow="True" Layout="Player" Owner="Player" HideStatesBelow="False" ForceSplitscreen="True">
      <State.Widgets>
        <StateWidget Filename="SplitItem.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="SplitItemToggle">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.SplitItemToggle">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: ConditionsPanel-->
    <State Name="ConditionsPanel" Layout="Player" Owner="Player" HideStatesBelow="False" ForceSplitscreen="True">
      <State.Widgets>
        <StateWidget Filename="ConditionsPanel.xaml" Layer="Panels"/>
      </State.Widgets>
      <State.Events>
        <Event Name="ToggleConditionsPanel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: MainMenu.LoadGame-->
    <State Name="MainMenu.LoadGame" DisableStatesBelow="True" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="LoadGame.xaml"/>
      </State.Widgets>
      <State.Events>
        <Event Name="LoadGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.LoadGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Paused.LoadGame-->
    <State Name="Paused.LoadGame" DisableStatesBelow="True" IsModal="True" Layout="Player" Owner="Player" HideStatesBelow="False" ForceSplitscreen="True">
      <State.Widgets>
        <StateWidget Filename="LoadGame.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="LoadGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.LoadGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Paused.SaveGame-->
    <State Name="Paused.SaveGame" DisableStatesBelow="True" IsModal="True" Layout="Player" Owner="Player" HideStatesBelow="False" ForceSplitscreen="True">
      <State.Widgets>
        <StateWidget Filename="SaveGame.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="SaveGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.SaveGameClose">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenNewSaveDialog">
          <Event.Actions>
            <AddSubstate Name="SaveGame.InputSaveName"/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: SaveGame.InputSaveName-->
    <State Name="SaveGame.InputSaveName" DisableStatesBelow="True" Layout="Common" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="SaveGameInputSaveNameDialog.xaml" Layer="MessageBox"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseMessageBox">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Container Inventory -->
    <State Name="ContainerInventory" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Container.xaml" Layer="HUDTop"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseAll">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Pickpocket -->
    <State Name="Pickpocket" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Pickpocket.xaml" Layer="HUD"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Combine UI-->
    <State Name="Combine" DisableStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Combine.xaml" Layer="Panels"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Examine-->
    <State Name="Examine" DisableStatesBelow="False" HideStatesBelow="False" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="Examine.xaml" Layer="Panels"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Options-->
    <State Name="Options" Layout="Common" Owner="All" DisableStatesBelow="True" IsModal="True" HideStatesBelow="True">
      <State.InitialSubstates>
        <InitialSubstate Name="GameOptions"/>
      </State.InitialSubstates>
      <State.Events>
        <Event Name="OpenAudioOptions">
          <Event.Actions>
            <SetSubstate Name="AudioOptions"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenVideoOptions">
          <Event.Actions>
            <SetSubstate Name="VideoOptions"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenGameOptions">
          <Event.Actions>
            <SetSubstate Name="GameOptions"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenKeybindingOptions">
          <Event.Actions>
            <SetSubstate Name="KeybindingOptions"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenControllerOptions">
          <Event.Actions>
            <SetSubstate Name="ControllerOptions"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenHDR">
          <Event.Actions>
            <AddSubstate Name="HDRCalibration"/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: Audio Options-->
    <State Name="AudioOptions" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="AudioOptions.xaml" Layer="Pause"/>
      </State.Widgets>
    </State>

    <!--STATE: Video Options-->
    <State Name="VideoOptions" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="VideoOptions.xaml" Layer="Pause"/>
      </State.Widgets>
    </State>

    <!--STATE: Game Options-->
    <State Name="GameOptions" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="GameOptions.xaml" Layer="Pause"/>
      </State.Widgets>
    </State>

    <!--STATE: Keybinding Options-->
    <State Name="KeybindingOptions" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="KeybindingOptions.xaml" Layer="Pause"/>
      </State.Widgets>
    </State>

    <!--STATE: Controller Options-->
    <State Name="ControllerOptions" Layout="Common" Owner="All">
      <State.Widgets>
        <StateWidget Filename="ControllerOptions.xaml" Layer="Pause"/>
      </State.Widgets>
    </State>

    <!--STATE: Active Roll -->
    <State Name="ActiveRoll" DisableStatesBelow="True" IsModal="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ActiveRoll.xaml" Layer="HUDTop"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: LobbyBrowser-->
    <State Name="LobbyBrowser" Layout="Common" Owner="DefaultPlayer">
      <State.Widgets>
        <StateWidget Filename="LobbyBrowser.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.ToggleInGameMenu">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="Lobby" Layout="Common" Owner="All" DisableStatesBelow="True" HideStatesBelow="True">
      <State.Widgets>
        <StateWidget Filename="Lobby.xaml" Layer="Panels"/>
      </State.Widgets>

      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>

        <Event Name="GE.Lobby">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>

        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>

      </State.Events>
    </State>

    <!--STATE: CharacterAssign -->
    <State Name="CharacterAssign" DisableStatesBelow="True" IsModal="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="CharacterAssign.xaml" Layer="Pause"/>
      </State.Widgets>
      <State.Events>
        <Event Name="ConnectivityMenuOpen">
          <Event.Actions>
            <PushState Name="ConnectivityMenu"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
        <Event Name="OpenPiPPanel">
          <Event.Actions>
            <PushState Name="PiPPanel"/>
          </Event.Actions>
        </Event>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="CloseMessageBox">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: ConnectivityMenu -->
    <State Name="ConnectivityMenu" DisableStatesBelow="True" Layout="Player" Owner="Player">
      <State.Widgets>
        <StateWidget Filename="ConnectivityMenu.xaml" Layer="Pause"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: RewardPanel -->
    <State Name="RewardPanel" DisableStatesBelow="False" Layout="Player" Owner="Player" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="RewardPanel.xaml" Layer="Panels"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <!--STATE: CombatLog - empty state to switch between kb & controller-->
    <State Name="CombatLog" Layout="Player" Owner="Player" HideStatesBelow="False"/>

    <!--STATE: Tutorials - The modal tutorial showing and highlighting other UIs while explaining their use-->
    <State Name="Tutorial" DisableStatesBelow="True" Layout="Player" Owner="Player" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="Tutorial.xaml" Layer="HUDTop"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <!--The message boxes shouldn't be usable on the modal tutorial, they are fallbacks as long all tutorials are not implemented.-->
        <Event Name="OpenMessageBox">
          <Event.Actions>
            <AddSubstate Name="MessageBox"/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="ActOver" DisableStatesBelow="True" Layout="Player" Owner="Player" HideStatesBelow="True" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="OverviewMap.xaml" Layer="Notifications"/>
      </State.Widgets>
      <State.Events>
        <Event Name="CloseWidget">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.UICancel">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
        <Event Name="IE.UIAccept">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="Busy" Layout="Common" Owner="All" DisableStatesBelow="False" HideStatesBelow="False" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="Busy.xaml" Layer="Pause"/>
      </State.Widgets>

      <State.Events>
        <Event Name="GE.OnBusyHide">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

    <State Name="Saving" Layout="Common" Owner="All" DisableStatesBelow="False" IsModal="True">
      <State.Widgets>
        <StateWidget Filename="Saving.xaml" Layer="Notifications"/>
      </State.Widgets>

      <State.Events>
        <Event Name="GE.OnSaveHide">
          <Event.Actions>
            <RemoveState/>
          </Event.Actions>
        </Event>
      </State.Events>
    </State>

  </StateMachine.States>
</StateMachine>